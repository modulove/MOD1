/*
This code was originally written by HAGIWO and released under CC0

HAGIWO MOD1 VCO Ver1.0
Audio output operation is somewhat unstable and produces a noise sound.

Square wave oscillator with V/oct support.
LFO for vibrato and octave like chiptune.
The capacitor in the D11 output circuit needs to be removed.

https://note.com/solder_state/n/nacfeb7b26e62

--Pin assign---
POT1  A0  frequency tune
POT2  A1  octave
POT3  A2  vibrato LFO level
F1    A3  V/oct CV in
F2    A4  octave CV in  
F3    A5  vibrato level CV in 
F4    D11 audio out
BUTTON    octave LFO on/off
LED       octave LFO on/off
EEPROM    N/A
*/

#include <avr/pgmspace.h>
#include <Arduino.h>

// pin definitions
const int OUTPUT_PIN = 11;     // tone output pin
const int POT_FREQ_PIN = A0;   // frequency control pot
const int POT_OCT_PIN = A1;    // octave selection pot
const int VOCT_PIN = A3;       // V/oct input pin
const int LFO_AMP_PIN = A2;    // LFO amplitude pot pin
const int CV_OCT_PIN = A4;     // additional CV input for octave pot
const int CV_LFO_PIN = A5;     // additional CV input for LFO amplitude pot

// Button stuff
const int buttonPin = 4;       // momentary push button pin
const int togglePin = 3;       // toggle output pin

// For button debounce
int lastButtonState = HIGH;          // button is HIGH when not pressed
unsigned long buttonPreviousMillis = 0;
const unsigned long debounceDelay = 50; // ms
bool toggleState = false;            // track HIGH/LOW state of D3

float rawVIn = 1;
float freq = 1;

// base frequency
const float BASE_FREQ = 40.0;

// limit for max frequency
const unsigned int MAX_FREQ = 20000;

// Octave map
int octMap[6] = { 1, 2, 4, 8, 16, 32 };

// V/Oct map
// Stored in flash memory
const float PROGMEM voctMap[1024] = {
1.000000, 1.003394, 1.006799, 1.010215, 1.013643, 1.017083, 1.020535, 1.023998, 1.027473, 1.030960, 1.034459, 1.037969, 1.041491, 1.045026, 1.048572, 1.052131, 1.055701, 1.059284, 1.062878, 1.066485, 1.070105, 1.073736, 1.077380, 1.081036, 1.084704, 1.088385, 1.092079, 1.095785, 1.099504, 1.103235, 1.106979, 1.110735, 1.114505, 1.118287, 1.122082, 1.125890, 1.129710, 1.133544, 1.137391, 1.141251, 1.145124, 1.149010, 1.152909, 1.156821, 1.160747, 1.164686, 1.168639, 1.172605, 1.176584, 1.180577, 1.184583, 1.188603, 1.192637, 1.196684, 1.200745, 1.204820, 1.208908, 1.213011, 1.217127, 1.221258, 1.225402, 1.229560, 1.233733, 1.237920, 1.242121, 1.246336, 1.250566, 1.254809, 1.259068, 1.263340, 1.267628, 1.271929, 1.276246, 1.280577, 1.284922, 1.289283, 1.293658, 1.298048, 1.302453, 1.306873, 1.311308, 1.315758, 1.320223, 1.324704, 1.329199, 1.333710, 1.338236, 1.342777, 1.347334, 1.351906, 1.356494, 1.361097, 1.365716, 1.370351, 1.375001, 1.379668, 1.384349, 1.389047, 1.393761, 1.398491, 1.403237, 1.407999, 1.412777, 1.417571, 1.422382, 1.427209, 1.432052, 1.436912, 1.441788, 1.446681, 1.451590, 1.456516, 1.461459, 1.466419, 1.471395, 1.476388, 1.481399, 1.486426, 1.491470, 1.496532, 1.501610, 1.506706, 1.511819, 1.516949, 1.522097, 1.527263, 1.532446, 1.537646, 1.542864, 1.548100, 1.553353, 1.558625, 1.563914, 1.569221, 1.574547, 1.579890, 1.585251, 1.590631, 1.596029, 1.601445, 1.606880, 1.612333, 1.617804, 1.623294, 1.628803, 1.634331, 1.639877, 1.645442, 1.651026, 1.656629, 1.662251, 1.667891, 1.673552, 1.679231, 1.684929, 1.690647, 1.696385, 1.702141, 1.707918, 1.713714, 1.719529, 1.725365, 1.731220, 1.737095, 1.742990, 1.748905, 1.754840, 1.760795, 1.766770, 1.772766, 1.778782, 1.784818, 1.790875, 1.796953, 1.803051, 1.809169, 1.815309, 1.821469, 1.827651, 1.833853, 1.840076, 1.846320, 1.852586, 1.858873, 1.865181, 1.871511, 1.877862, 1.884234, 1.890629, 1.897045, 1.903482, 1.909942, 1.916424, 1.922927, 1.929453, 1.936000, 1.942570, 1.949162, 1.955777, 1.962414, 1.969074, 1.975756, 1.982461, 1.989188, 1.995939, 2.002712, 2.009508, 2.016328, 2.023170, 2.030036, 2.036925, 2.043838, 2.050773, 2.057733, 2.064716, 2.071723, 2.078753, 2.085808, 2.092886, 2.099988, 2.107115, 2.114265, 2.121440, 2.128639, 2.135863, 2.143111, 2.150384, 2.157681, 2.165004, 2.172351, 2.179723, 2.187120, 2.194542, 2.201989, 2.209462, 2.216960, 2.224483, 2.232032, 2.239607, 2.247207, 2.254833, 2.262485, 2.270163, 2.277867, 2.285597, 2.293353, 2.301136, 2.308945, 2.316780, 2.324642, 2.332531, 2.340447, 2.348389, 2.356359, 2.364355, 2.372379, 2.380429, 2.388508, 2.396613, 2.404746, 2.412907, 2.421095, 2.429311, 2.437555, 2.445827, 2.454127, 2.462456, 2.470812, 2.479197, 2.487610, 2.496052, 2.504523, 2.513022, 2.521550, 2.530107, 2.538693, 2.547308, 2.555953, 2.564627, 2.573330, 2.582063, 2.590825, 2.599617, 2.608439, 2.617291, 2.626173, 2.635085, 2.644027, 2.653000, 2.662003, 2.671037, 2.680101, 2.689196, 2.698322, 2.707479, 2.716667, 2.725886, 2.735137, 2.744418, 2.753732, 2.763077, 2.772453, 2.781862, 2.791302, 2.800775, 2.810279, 2.819816, 2.829386, 2.838987, 2.848621, 2.858288, 2.867988, 2.877721, 2.887487, 2.897286, 2.907118, 2.916983, 2.926882, 2.936815, 2.946781, 2.956781, 2.966815, 2.976883, 2.986985, 2.997122, 3.007293, 3.017498, 3.027738, 3.038013, 3.048323, 3.058667, 3.069047, 3.079462, 3.089912, 3.100398, 3.110920, 3.121477, 3.132070, 3.142699, 3.153364, 3.164065, 3.174802, 3.185576, 3.196386, 3.207234, 3.218118, 3.229038, 3.239996, 3.250991, 3.262024, 3.273094, 3.284201, 3.295346, 3.306529, 3.317750, 3.329009, 3.340306, 3.351642, 3.363016, 3.374429, 3.385880, 3.397370, 3.408899, 3.420468, 3.432075, 3.443722, 3.455409, 3.467135, 3.478901, 3.490707, 3.502552, 3.514439, 3.526365, 3.538332, 3.550340, 3.562388, 3.574477, 3.586607, 3.598779, 3.610991, 3.623245, 3.635541, 3.647878, 3.660258, 3.672679, 3.685143, 3.697648, 3.710197, 3.722787, 3.735421, 3.748097, 3.760817, 3.773579, 3.786385, 3.799234, 3.812127, 3.825064, 3.838045, 3.851069, 3.864138, 3.877251, 3.890409, 3.903611, 3.916858, 3.930150, 3.943488, 3.956870, 3.970298, 3.983771, 3.997291, 4.010856, 4.024467, 4.038124, 4.051828, 4.065578, 4.079375, 4.093218, 4.107109, 4.121047, 4.135032, 4.149064, 4.163144, 4.177272, 4.191448, 4.205672, 4.219944, 4.234265, 4.248634, 4.263052, 4.277519, 4.292035, 4.306600, 4.321215, 4.335879, 4.350593, 4.365357, 4.380171, 4.395036, 4.409951, 4.424916, 4.439932, 4.454999, 4.470118, 4.485287, 4.500508, 4.515781, 4.531106, 4.546482, 4.561911, 4.577392, 4.592926, 4.608512, 4.624151, 4.639844, 4.655589, 4.671388, 4.687241, 4.703148, 4.719108, 4.735123, 4.751191, 4.767315, 4.783493, 4.799726, 4.816014, 4.832358, 4.848757, 4.865211, 4.881722, 4.898288, 4.914911, 4.931590, 4.948325, 4.965118, 4.981967, 4.998874, 5.015838, 5.032859, 5.049939, 5.067076, 5.084271, 5.101525, 5.118838, 5.136209, 5.153639, 5.171128, 5.188676, 5.206285, 5.223952, 5.241680, 5.259468, 5.277316, 5.295225, 5.313195, 5.331226, 5.349318, 5.367471, 5.385686, 5.403962, 5.422301, 5.440702, 5.459165, 5.477691, 5.496280, 5.514932, 5.533647, 5.552426, 5.571269, 5.590175, 5.609146, 5.628181, 5.647280, 5.666445, 5.685674, 5.704969, 5.724329, 5.743755, 5.763246, 5.782804, 5.802429, 5.822120, 5.841877, 5.861702, 5.881594, 5.901554, 5.921581, 5.941676, 5.961840, 5.982072, 6.002372, 6.022741, 6.043180, 6.063688, 6.084265, 6.104913, 6.125630, 6.146418, 6.167276, 6.188205, 6.209205, 6.230276, 6.251419, 6.272634, 6.293920, 6.315279, 6.336711, 6.358215, 6.379792, 6.401442, 6.423165, 6.444963, 6.466834, 6.488780, 6.510800, 6.532895, 6.555064, 6.577309, 6.599630, 6.622026, 6.644498, 6.667047, 6.689672, 6.712374, 6.735153, 6.758009, 6.780943, 6.803954, 6.827044, 6.850212, 6.873458, 6.896784, 6.920189, 6.943673, 6.967236, 6.990880, 7.014604, 7.038409, 7.062294, 7.086260, 7.110308, 7.134437, 7.158648, 7.182942, 7.207317, 7.231776, 7.256317, 7.280942, 7.305650, 7.330443, 7.355319, 7.380280, 7.405325, 7.430455, 7.455671, 7.480972, 7.506360, 7.531833, 7.557393, 7.583039, 7.608773, 7.634593, 7.660502, 7.686498, 7.712583, 7.738756, 7.765018, 7.791369, 7.817809, 7.844340, 7.870960, 7.897670, 7.924472, 7.951364, 7.978347, 8.005422, 8.032589, 8.059848, 8.087200, 8.114644, 8.142182, 8.169813, 8.197538, 8.225356, 8.253270, 8.281278, 8.309381, 8.337579, 8.365873, 8.394263, 8.422750, 8.451333, 8.480013, 8.508790, 8.537666, 8.566639, 8.595710, 8.624880, 8.654149, 8.683518, 8.712986, 8.742554, 8.772222, 8.801991, 8.831861, 8.861833, 8.891906, 8.922081, 8.952359, 8.982739, 9.013223, 9.043809, 9.074500, 9.105295, 9.136194, 9.167199, 9.198308, 9.229523, 9.260844, 9.292271, 9.323805, 9.355446, 9.387194, 9.419050, 9.451015, 9.483087, 9.515269, 9.547559, 9.579959, 9.612470, 9.645090, 9.677821, 9.710664, 9.743617, 9.776683, 9.809861, 9.843151, 9.876554, 9.910071, 9.943702, 9.977446, 10.011305, 10.045279, 10.079368, 10.113573, 10.147894, 10.182332, 10.216886, 10.251558, 10.286347, 10.321255, 10.356280, 10.391425, 10.426689, 10.462073, 10.497576, 10.533200, 10.568945, 10.604812, 10.640800, 10.676910, 10.713143, 10.749499, 10.785978, 10.822581, 10.859308, 10.896159, 10.933136, 10.970238, 11.007467, 11.044821, 11.082302, 11.119911, 11.157647, 11.195511, 11.233504, 11.271625, 11.309876, 11.348257, 11.386768, 11.425410, 11.464183, 11.503087, 11.542123, 11.581292, 11.620594, 11.660029, 11.699598, 11.739302, 11.779140, 11.819113, 11.859222, 11.899467, 11.939848, 11.980367, 12.021023, 12.061817, 12.102750, 12.143821, 12.185032, 12.226383, 12.267874, 12.309505, 12.351278, 12.393193, 12.435250, 12.477450, 12.519793, 12.562280, 12.604911, 12.647686, 12.690607, 12.733673, 12.776886, 12.820245, 12.863751, 12.907405, 12.951207, 12.995158, 13.039258, 13.083507, 13.127907, 13.172457, 13.217159, 13.262012, 13.307017, 13.352176, 13.397487, 13.442952, 13.488572, 13.534346, 13.580276, 13.626361, 13.672603, 13.719002, 13.765558, 13.812272, 13.859145, 13.906177, 13.953369, 14.000720, 14.048232, 14.095906, 14.143741, 14.191739, 14.239899, 14.288223, 14.336711, 14.385364, 14.434182, 14.483165, 14.532314, 14.581631, 14.631114, 14.680766, 14.730586, 14.780575, 14.830734, 14.881063, 14.931563, 14.982234, 15.033077, 15.084093, 15.135281, 15.186644, 15.238181, 15.289892, 15.341780, 15.393843, 15.446083, 15.498500, 15.551095, 15.603869, 15.656821, 15.709954, 15.763267, 15.816760, 15.870435, 15.924293, 15.978333, 16.032556, 16.086964, 16.141556, 16.196333, 16.251296, 16.306446, 16.361783, 16.417308, 16.473021, 16.528923, 16.585015, 16.641297, 16.697770, 16.754435, 16.811293, 16.868343, 16.925586, 16.983024, 17.040657, 17.098486, 17.156511, 17.214732, 17.273152, 17.331769, 17.390586, 17.449602, 17.508818, 17.568235, 17.627854, 17.687675, 17.747699, 17.807927, 17.868360, 17.928997, 17.989840, 18.050890, 18.112147, 18.173611, 18.235284, 18.297167, 18.359260, 18.421563, 18.484078, 18.546804, 18.609744, 18.672897, 18.736265, 18.799848, 18.863646, 18.927661, 18.991893, 19.056343, 19.121012, 19.185901, 19.251009, 19.316339, 19.381890, 19.447663, 19.513660, 19.579881, 19.646327, 19.712998, 19.779895, 19.847019, 19.914371, 19.981952, 20.049762, 20.117802, 20.186073, 20.254576, 20.323311, 20.392279, 20.461482, 20.530919, 20.600592, 20.670501, 20.740648, 20.811032, 20.881656, 20.952519, 21.023623, 21.094968, 21.166555, 21.238385, 21.310459, 21.382777, 21.455341, 21.528151, 21.601208, 21.674513, 21.748067, 21.821870, 21.895924, 21.970229, 22.044786, 22.119597, 22.194661, 22.269980, 22.345554, 22.421385, 22.497474, 22.573820, 22.650426, 22.727292, 22.804418, 22.881806, 22.959457, 23.037371, 23.115550, 23.193994, 23.272704, 23.351682, 23.430927, 23.510441, 23.590225, 23.670280, 23.750607, 23.831206, 23.912079, 23.993226, 24.074648, 24.156347, 24.238323, 24.320577, 24.403111, 24.485924, 24.569019, 24.652395, 24.736055, 24.819998, 24.904226, 24.988740, 25.073541, 25.158629, 25.244007, 25.329674, 25.415632, 25.501881, 25.588423, 25.675259, 25.762390, 25.849816, 25.937539, 26.025560, 26.113879, 26.202498, 26.291418, 26.380639, 26.470164, 26.559992, 26.650125, 26.740564, 26.831309, 26.922363, 27.013726, 27.105398, 27.197382, 27.289678, 27.382287, 27.475211, 27.568450, 27.662005, 27.755878, 27.850069, 27.944580, 28.039411, 28.134565, 28.230041, 28.325842, 28.421967, 28.518419, 28.615198, 28.712305, 28.809742, 28.907510, 29.005609, 29.104042, 29.202808, 29.301909, 29.401347, 29.501123, 29.601236, 29.701690, 29.802485, 29.903621, 30.005101, 30.106925, 30.209095, 30.311611, 30.414475, 30.517689, 30.621252, 30.725168, 30.829435, 30.934057, 31.039034, 31.144366, 31.250057, 31.356106, 31.462515, 31.569284, 31.676417, 31.783913, 31.891773, 32.000000
};

// Variables for reading pots every 10ms
unsigned long lastPotUpdate = 0;   // track last time pots were read
float freqFactor = 1.0;           // store frequency factor from A0
int octave = 1;                   // store octave value from A1

// LFO variables
const float LFO_FREQUENCY = 10.0;  // 10Hz
float lfoPhase = 0.0;             // current phase of LFO
float lfoAmp = 0.0;               // LFO amplitude factor (up to ±5%)
unsigned long lastLfoUpdate = 0;  // track last time LFO phase was updated

// Chiptune-like toggling at 20Hz, one octave higher
const float CHIPTUNE_FREQ = 20.0;  // 20Hz
float chipPhase = 0.0;
unsigned long lastChipUpdate = 0;

//------------------------------------------------------------------------------
void handleButtonInput() {
  int reading = digitalRead(buttonPin); // LOW when pressed
  unsigned long currentMillis = millis();

  // Debounce check
  if (currentMillis - buttonPreviousMillis > debounceDelay) {
    // Detect transition HIGH->LOW (button press)
    if (reading == LOW && lastButtonState == HIGH) {
      // toggle D3
      toggleState = !toggleState;
      digitalWrite(togglePin, toggleState ? HIGH : LOW);

      buttonPreviousMillis = currentMillis;
    }
  }
  lastButtonState = reading;
}
//------------------------------------------------------------------------------

void setup() {
  // Set the tone output pin as output
  pinMode(OUTPUT_PIN, OUTPUT);

  // Setup for button and toggle pin
  pinMode(buttonPin, INPUT_PULLUP); // internal pullup
  pinMode(togglePin, OUTPUT);
  digitalWrite(togglePin, LOW);
}

void loop() {
  // Get current time in milliseconds
  unsigned long currentMillis = millis();

  // Handle button input
  handleButtonInput();

  // Read A0, A1 (plus A4), A2 (plus A5) only if at least 10ms have passed
  if (currentMillis - lastPotUpdate >= 10) {
    lastPotUpdate = currentMillis;  // update the time marker

    // Read A0 for frequency factor (0 -> 1.0, 1023 -> 2.0)
    float rawFreqVal = analogRead(POT_FREQ_PIN);  // read 0~1023
    freqFactor = 1.0 + (rawFreqVal / 1023.0);     // up to 2.0x

    // For octave pot on A1, add CV from A4
    int rawOctVal = analogRead(POT_OCT_PIN); // 0~1023
    int cvOctVal  = analogRead(CV_OCT_PIN);  // 0~1023
    int combinedOctVal = rawOctVal + cvOctVal;
    if (combinedOctVal > 1023) {
      combinedOctVal = 1023;
    }
    // octave = map(combinedOctVal, 0, 1023, 1, 6);
  if (combinedOctVal < 102) {
    octave = 1; 
  } else if (combinedOctVal < 308) {
    octave = 2; 
  } else if (combinedOctVal < 514) {
    octave = 3; 
  } else if (combinedOctVal < 720) {
    octave = 4; 
  } else if (combinedOctVal < 926) {
    octave = 5; 
  } else {
    octave = 6; 
  }

    // For LFO amplitude pot on A2, add CV from A5
    int rawLfoVal = analogRead(LFO_AMP_PIN); // 0~1023
    int cvLfoVal  = analogRead(CV_LFO_PIN);  // 0~1023
    int combinedLfoVal = rawLfoVal + cvLfoVal;
    if (combinedLfoVal > 1023) {
      combinedLfoVal = 1023;
    }
    lfoAmp = (combinedLfoVal / 1023.0) * 0.05; // max ±5%
  }

  // Update LFO phase
  unsigned long dt = currentMillis - lastLfoUpdate;
  float dtSec = dt / 1000.0; // convert to seconds
  lastLfoUpdate = currentMillis;

  // Increase phase
  lfoPhase += 2.0 * PI * LFO_FREQUENCY * dtSec;
  if (lfoPhase > TWO_PI) {
    lfoPhase -= TWO_PI; // wrap around
  }

  // Calculate LFO value (-1.0 ~ +1.0)
  float lfoVal = sin(lfoPhase);

  // Read A3 for V/oct input every loop
  rawVIn = analogRead(VOCT_PIN);  // 0~1023

  // Calculate base frequency
  freq = BASE_FREQ
         * freqFactor
         * pgm_read_float(&voctMap[(int)rawVIn])
         * octMap[octave - 1];

  // Apply LFO (±lfoAmp)
  freq *= (1.0 + (lfoVal * lfoAmp));

  // If D3 LED is HIGH, do 20Hz pitch toggling, 1oct up
  if (toggleState) {
    // Update phase for chiptune effect
    unsigned long dtChip = currentMillis - lastChipUpdate;
    float dtChipSec = dtChip / 1000.0;
    lastChipUpdate = currentMillis;

    chipPhase += 2.0 * PI * CHIPTUNE_FREQ * dtChipSec;
    if (chipPhase > TWO_PI) {
      chipPhase -= TWO_PI;
    }

    // Square wave: half cycle normal, half cycle 1 octave up
    if (sin(chipPhase) > 0) {
      freq *= 2.0; // 1 octave up
    }
  }

  // Limit frequency to MAX_FREQ
  if (freq > MAX_FREQ) {
    freq = MAX_FREQ;
  }

  // Output the tone on D11
  tone(OUTPUT_PIN, (unsigned int)freq);

  // No delay used, loop executes continuously
}
